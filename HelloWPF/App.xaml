<Application x:Class="HelloWPF.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:HelloWPF" 
             xmlns:sys="clr-namespace:System;assembly=System.Runtime"
             DispatcherUnhandledException="Application_DispatcherUnhandledException"
             StartupUri="MainWindow.xaml">
    
    <Application.Resources>
        <!-- If you need the ability to access the resource from several windows, this is possible as well. The App.xaml file can contain resources just like the window and any kind of WPF control, and when you store them in App.xaml, they are globally accessible in all of windows and user controls of the project. It works exactly the same way as when storing and using from a Window: -->
        <sys:String x:Key="strApp">Hello, WPF Application World!</sys:String>
        <sys:String x:Key="strHelloWorld">Hello WPF in Lee World !</sys:String>
    </Application.Resources>
</Application>
    
<!-- NOTE 
==> However, sometimes even the simplest code can throw an exception, and instead of wrapping every single line of code with a try- catch block, WPF lets you handle all unhandled exceptions globally. This is done through the DispatcherUnhandledException event on the Application class. If subscribed to, WPF will call the subscribing method once an exception is thrown which is not handled in your own code. Here's a complete example, based on the stuff we just went through:
    DispatcherUnhandledException="Application_DispatcherUnhandledException" 
-->