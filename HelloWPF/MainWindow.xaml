<Window x:Class="HelloWPF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:HelloWPF"
        xmlns:sys="clr-namespace:System;assembly=System.Runtime"
        mc:Ignorable="d"
        Title="MainWindow" Height="1800" Width="1800">

    <!-- Add Resources -->
    <Window.Resources>
        <sys:String x:Key="strWindow">Hello, WPF Window World!</sys:String>
        <x:Array x:Key="ComboBoxItems" Type="sys:String">
            <sys:String>Item #1 WPF</sys:String>
            <sys:String>Item #2 XAML</sys:String>
            <sys:String>Item #3 C#</sys:String>
        </x:Array>
        <LinearGradientBrush x:Key="WindowBackgroundBrush">
            <GradientStop Offset="0" Color="Silver"/>
            <GradientStop Offset="1" Color="Gray"/>
        </LinearGradientBrush>
        <!-- Buttons Padding Globally ==> You can apply the padding globally, either across the entire application or just this specific Window, using a Style (more on styles later). Here's an example where we apply it to the Window, using the Window.Resources property: -->
        <Style TargetType="{x:Type Button}">
            <Setter Property="Padding" Value="5,2"/>
        </Style>
    </Window.Resources>

    <!-- Grid For All Views -->
    <Grid Name="pnlMainGrid" MouseUp="pnlMainGrid_MouseUp" Background="LightBlue">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="800"/>
            <!-- Grid.Column="1" Images Controls -->
            <ColumnDefinition Width="1000"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <!-- Grid.Row="0" Text Hello WPF -->
            <RowDefinition Height="Auto"/>
            <!-- Grid.Row="1" Text Hello WPF With Resources -->
            <RowDefinition Height="Auto"/>
            <!-- Grid.Row="2" Buttons + Combo Boxs + Lables + TextBlocks + Culture Controls -->
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Row 0 : Text Hello WPF -->
        <StackPanel Grid.Row="0">
            <TextBlock Name="txtHelloWPF"  HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="50" Grid.ColumnSpan="2" Margin="0,0,0,0" MouseDown="helloWPF_MouseDown">
            Hello, WPF!
            </TextBlock>
            <!--WPF text rendering ==> Using the TextFormattingMode property, you get to decide which algorithm should be used when formatting the text. You can choose between Ideal (the default value) and Display. You would normally want to leave this property untouched, since the Ideal setting will be best for most situations, but in cases where you need to render very small text, the Display setting can sometimes yield a better result. Here's an example where you can see the difference (although it's very subtle): -->
            <StackPanel Margin="10" Orientation="Horizontal" HorizontalAlignment="Center">
                <Label TextOptions.TextFormattingMode="Ideal" FontSize="9">Ideal, small text</Label>
                <Label TextOptions.TextFormattingMode="Display" FontSize="9">Display, small text</Label>
                <Label TextOptions.TextFormattingMode="Ideal" FontSize="20">TextFormattingMode.Ideal:large</Label>
                <Label TextOptions.TextFormattingMode="Display" FontSize="20">TextFormattingMode.Display:large</Label>
            </StackPanel>
        </StackPanel>

        <!-- Row 1 : Hello WPF With Resources -->
        <!-- Text Hello WPF With Resources -->
        <StackPanel Grid.Row="1" Margin="10" Orientation="Horizontal" HorizontalAlignment="Center">
            <TextBlock Text="{StaticResource strHelloWorld}" FontSize="20" HorizontalAlignment="Center"/>
            <TextBlock HorizontalAlignment="Center" FontSize="10"> Just another 
                "<TextBlock Text="{StaticResource strHelloWorld}" FontSize="15"/>" 
                example, but with resources!</TextBlock>
        </StackPanel>
        
        <!-- Row 2 On Left Side : Culture Controls + Combo Boxs + Lables + DockPanel  -->
        <!-- Multi Color Button and Handling exceptions Button -->
        <StackPanel Grid.Row="2" Margin="20"  Orientation="Horizontal">
            <StackPanel Width="350"  Orientation="Vertical">
                <!-- ComboBox With Resources -->
                <!-- If you only need a given resource for a specific control, you can make it more local by adding it to this specific control, instead of the window. It works exactly the same way, the only difference being that you can now only access from inside the scope of the control where you put it: -->
                <StackPanel Margin="10 10 10 10" Background="LightCyan">
                    <StackPanel.Resources>
                        <sys:String x:Key="ComboBoxTitle">Items To Learn:</sys:String>
                    </StackPanel.Resources>
                    <Label Content="{StaticResource ComboBoxTitle}" />
                    <ComboBox Margin="10 10 10 10" ItemsSource="{StaticResource ComboBoxItems}" />
                </StackPanel>

                <!-- The Label control and TextBox control -->
                <StackPanel Margin="10 10 10 10" Orientation="Vertical" Background="LightCyan">
                    <Label Target="{Binding ElementName=txtName}">
                        <StackPanel Orientation="Horizontal">
                            <Image Source="http://cdn1.iconfinder.com/data/icons/fatcow/16/bullet_green.png" />
                            <AccessText Text="_Label Name:" />
                        </StackPanel>
                    </Label>
                    <TextBox Name="txtName" Width="300" />
                    <Label Target="{Binding ElementName=txtMail}">
                        <StackPanel Orientation="Horizontal">
                            <Image Source="http://cdn1.iconfinder.com/data/icons/fatcow/16/bullet_blue.png" />
                            <AccessText Text="_Label Mail:" />
                        </StackPanel>
                    </Label>
                    <TextBox Name="txtMail" Width="300"  Text="Hello, I am a TextBox With Text" />
                    <Label Target="{Binding ElementName=txtMultilineTextBox}">
                        <StackPanel Orientation="Horizontal">
                            <Image Source="http://cdn1.iconfinder.com/data/icons/fatcow/16/bullet_pink.png" />
                            <AccessText Text="_Label Multi Line and Spell Check TextBox :" />
                        </StackPanel>
                    </Label>
                    <TextBox Margin="0 0 0 10" Name="txtMultiLine" Width="300" AcceptsReturn="True" TextWrapping="Wrap" SpellCheck.IsEnabled="True" Language="en-US" />
                </StackPanel>

                <!-- Working with TextBox Section -->
                <!-- Just like any other editable control in Windows, the TextBox allows for selection of text, e.g. to delete an entire word at once or to copy a piece of the text to the clipboard. The WPF TextBox has several properties for working with selected text, all of them which you can read or even modify. In the next example, we will be reading these properties: -->
                <StackPanel  Margin="10 10 10 10" Background="LightCyan">
                    <TextBlock  Margin="10 10 10 10">Working with TextBox Section</TextBlock>
                    <DockPanel Margin="10 10 10 10">
                        <TextBox SelectionChanged="TextBox_SelectionChanged" DockPanel.Dock="Top" />
                        <TextBox Name="txtStatus" AcceptsReturn="True" TextWrapping="Wrap" IsReadOnly="True" />

                    </DockPanel>
                </StackPanel>

                <!-- StackPanal For  Application Culture / UICulture -->
                <StackPanel Margin="10 10 10 10"  Height="100"  Background="LightCyan">
                    <Grid Margin="10 0 10 0">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="100" />
                            <ColumnDefinition Width="200" />
                        </Grid.ColumnDefinitions>
                        <Label>Number:</Label>
                        <Label Name="lblNumber" Grid.Column="1" HorizontalAlignment="Left"/>
                        <Label Grid.Row="1">Date:</Label>
                        <Label Name="lblDate" Grid.Row="1" Grid.Column="1" HorizontalAlignment="Left"/>
                    </Grid>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="5 10 5 10">
                        <Button Tag="en-US" Click="CultureInfoSwitchButton_Click" HorizontalContentAlignment="Stretch">English (US)</Button>
                        <Button Tag="de-DE" Click="CultureInfoSwitchButton_Click" HorizontalContentAlignment="Stretch" Margin="10,0">German (DE)</Button>
                        <Button Tag="sv-SE" Click="CultureInfoSwitchButton_Click" HorizontalContentAlignment="Stretch">Swedish (SE)</Button>
                    </StackPanel>
                </StackPanel>

                <!-- The PasswordBox control -->
                <!-- PasswordBox and binding ==> When you need to obtain the password from the PasswordBox, you can use the Password property from Code-behind. However, for security reasons, the Password property is not implemented as a dependency property, which means that you can't bind to it. This may or may not be important to you - as already stated, you can still read the password from Code-behind, but for MVVM implementations or if you just love data bindings, a workaround has been developed. You can read much more about it here: http://blog.functionalfun.net/2008/06/wpf-passwordbox-and-data-binding.html -->
                <StackPanel Margin="10 10 10 10"  Background="LightCyan">
                    <StackPanel Margin="10" Orientation="Horizontal" HorizontalAlignment="Center">
                        <Label HorizontalAlignment="Right" Width="80">Text :</Label>
                        <TextBox Width="200"/>
                    </StackPanel>
                    <StackPanel Margin="10" Orientation="Horizontal" HorizontalAlignment="Center">
                        <Label HorizontalAlignment="Right" Width="80">Password :</Label>
                        <PasswordBox Width="200" PasswordChar="*" MaxLength="10"/>
                    </StackPanel>
                </StackPanel>

                <!-- DockPanel and  Application Culture / UICulture -->
                <StackPanel Margin="10 10 10 10"  Orientation="Horizontal" Background="LightCyan">
                    <!-- DockPanel With Resources From Application, Window and Panel -->
                    <DockPanel   Name="pnlMain" HorizontalAlignment="Center" Background="LightCyan">
                        <DockPanel.Resources>
                            <sys:String x:Key="strPanel">Hello, WPF Panel World!</sys:String>
                        </DockPanel.Resources>

                        <WrapPanel DockPanel.Dock="Top" HorizontalAlignment="Center" Margin="10 10 10 10">
                            <Button HorizontalAlignment="Center" Name="btnClickMe" Click="btnClickMe_Click">Click me to see string from many resources in ListBox!</Button>
                        </WrapPanel>
                        <ListBox Margin="10 10 10 10" Name="lbResult" />
                    </DockPanel>
                </StackPanel>
            </StackPanel>

            <!-- Row 3 On Right Side : Buttons + TextBlocks  + CheckBoxs -->
            <!-- The TextBlock control : Dealing with long strings -->
            <StackPanel Width="350"  Orientation="Vertical">
                <!-- Add ToolTip On Buttons -->
                <!-- Tooltips, infotips or hints - various names, but the concept remains the same: The ability to get extra information about a specific control or link by hovering the mouse over it. WPF obviously supports this concept as well, and by using the ToolTip property found on the FrameworkElement class, which almost any WPF control inherits from.-->
                <Button  Margin="5 5 5 5" FontWeight="Bold" Width="300" ToolTip="This is a toolTip, adjust the message here.. Click here to say hello WPF !"
                         ToolTipService.ShowDuration="5000"
                         ToolTipService.HasDropShadow="True"
                         ToolTipService.ShowOnDisabled="False">
                    <WrapPanel>
                        <TextBlock Foreground="Blue">Multi</TextBlock>
                        <TextBlock Foreground="Red">Color</TextBlock>
                        <TextBlock>Button</TextBlock>
                    </WrapPanel>
                </Button>

                <!-- Add ToolTip On Buttons -->
                <Button FontWeight="Bold" Width="300" Margin="5 5 5 5" HorizontalAlignment="Center" VerticalAlignment="Center" Click="HandelingExceptionButton_Click" ToolTipService.ShowDuration="5000">
                    Do something bad and handel it !
                    <Button.ToolTip>
                        <StackPanel>
                            <TextBlock FontWeight="Bold" FontSize="14" Margin="0,0,0,5">Click Here For Doing Bad Thing !</TextBlock>
                            <TextBlock>
                        This is another example of Custom ToolTip on a Button
                        <LineBreak />
                        If your click here the app will almost crash, but we got handler exception by showing alert message.
                            </TextBlock>
                            <Border BorderBrush="Silver" BorderThickness="0,1,0,0" Margin="0,8" />
                            <WrapPanel>
                                <!--<Image Source="/WpfTutorialSamples;component/Images/help.png" Margin="0,0,5,0" /> NEED TO FIGURE OUT HOW TO USE IMAGE-->
                                <TextBlock FontStyle="Italic">Press something for more test</TextBlock>
                            </WrapPanel>
                        </StackPanel>
                    </Button.ToolTip>
                </Button>

                <!-- Button Controls -->
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <StackPanel Orientation="Vertical" Width="150">
                        <!-- Button Controls With Normal VS Format Buttons -->
                        <Button Click="HelloButton_Click" Margin="10" >Hello Button</Button>
                        <Button Click="FormattedButton_Click" Background="Beige" Foreground="Blue" FontWeight="Bold" Margin="10">Hello Formatted Button</Button>
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Width="150">
                        <!-- Button Controls With Various Formatted Button -->
                        <Button Click="VariousFormattedButton_Click" Margin="10">
                            <StackPanel Orientation="Horizontal">
                                <TextBlock>Formatted</TextBlock>
                                <TextBlock Foreground="blue" FontWeight="Bold" Margin="2,0">Button</TextBlock>
                                <TextBlock Foreground="Gray" FontStyle="Italic"> [Various]</TextBlock>
                            </StackPanel>
                        </Button>

                        <!-- Button Controls With Image Button -->
                        <Button Click="ImageButton_Click" Margin="10">
                            <StackPanel Orientation="Horizontal">
                                <!--<Image Source="/WpfTutorialSamples;component/Images/help.png" /> BE BACK TO WORK ON IMAGE SOURCE -->
                                <TextBlock Margin="5,0">Help</TextBlock>
                            </StackPanel>
                        </Button>
                    </StackPanel>
                </StackPanel>

                <!-- TextBlock Controls -->
                <TextBlock Margin="10" Foreground="Red">
			This is a TextBlock control<LineBreak/>
			with multiple lines of text using LineBreak.
                </TextBlock>
                <TextBlock Margin="10" TextTrimming="CharacterEllipsis" Foreground="Green">
			This is a TextBlock control with text using TextTrimming="CharacterEllipsis" that may not be rendered completely, which will be indicated with an ellipsis.
                </TextBlock>
                <TextBlock Margin="10" TextWrapping="Wrap" Foreground="Blue">
			This is a TextBlock control with automatically wrapped text, using the TextWrapping property ==> TextWrapping="Wrap".
                </TextBlock>
                <TextBlock Margin="10" TextWrapping="Wrap">
			TextBlock with <Bold>bold</Bold>, <Italic>italic</Italic> and <Underline>underlined</Underline> text.
                </TextBlock>
                <TextBlock Margin="10" TextWrapping="Wrap">
			This text has a <Hyperlink RequestNavigate="Hyperlink_RequestNavigate" NavigateUri="https://www.google.com">link</Hyperlink> in it.
                </TextBlock>
                <TextBlock Margin="10" TextWrapping="Wrap">
			This <Span FontWeight="Bold">is</Span> a
			<Span Background="Silver" Foreground="Maroon">TextBlock</Span>
			with <Span TextDecorations="Underline">several</Span>
			<Span FontStyle="Italic">Span</Span> elements,
			<Span Foreground="Blue">
				using a <Bold>variety</Bold> of <Italic>styles</Italic>
			</Span>
                </TextBlock>

                <!-- CheckBox Control -->
                <!--The IsThreeState property As mentioned, the CheckBox usually corresponds to a boolean value, which means that it only has two states: true or false (on or off). However, since a boolean data type might be nullable, effectively allowing for a third option (true, false or null), the CheckBox control can also support this case. By setting the IsThreeState property to true, the CheckBox will get a third state called "the indeterminate state".A common usage for this is to have a "Enable all" CheckBox, which can control a set of child checkboxes, as well as show their collective state. Our example shows how you may create a list of features that can be toggled on and off, with a common "Enable all" CheckBox in the top:-->
                <StackPanel Margin="10" Orientation="Vertical">
                    <Label FontWeight="Bold" HorizontalAlignment="Center">Application Checkbox Options</Label>
                    <CheckBox HorizontalAlignment="Center" IsThreeState="True" Name="cbCheckAll" Checked="CheckedAllBoxs_CheckedChanged" Unchecked="CheckedAllBoxs_CheckedChanged">Enable ALL CheckBox WPF XAML</CheckBox>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="130" />
                            <ColumnDefinition Width="180" />
                        </Grid.ColumnDefinitions>
                        <CheckBox Name="cb1" Checked="CheckedBox_CheckedChanged" Unchecked="CheckedBox_CheckedChanged" Grid.Row="0">CB1 On R1 C0</CheckBox>
                        <CheckBox Name="cb2" Checked="CheckedBox_CheckedChanged" Unchecked="CheckedBox_CheckedChanged" Grid.Row="1" IsChecked="True">CB2 On R2 C0</CheckBox>
                        <CheckBox Name="cb3" Checked="CheckedBox_CheckedChanged" Unchecked="CheckedBox_CheckedChanged" Grid.Row="2">CB3 On R3 C0</CheckBox>
                        <CheckBox Name="cb4" Checked="CheckedBox_CheckedChanged" Unchecked="CheckedBox_CheckedChanged" Grid.Row="0" Grid.Column="1">
                            <TextBlock>CB4 Custom <Run Foreground="Green" FontWeight="Bold">On R0C1</Run></TextBlock>
                        </CheckBox>
                        <CheckBox Name="cb5" Checked="CheckedBox_CheckedChanged" Unchecked="CheckedBox_CheckedChanged" Grid.Row="1" Grid.Column="1" IsChecked="True">
                            <WrapPanel>
                                <TextBlock>CB5 With Image<Run FontWeight="Bold"></Run>On R1C1</TextBlock>
                                <!--<Image Source="/WpfTutorialSamples;component/Images/question.png" Width="16" Height="16" Margin="5,0" /-->
                            </WrapPanel>
                        </CheckBox>
                        <CheckBox Name="cb6" Checked="CheckedBox_CheckedChanged" Unchecked="CheckedBox_CheckedChanged" Grid.Row="2" Grid.Column="1">
                            <TextBlock>CB6 Custom <Run Foreground="Blue" FontWeight="Bold" TextDecorations="Underline">WWW.On R2C1</Run></TextBlock>
                        </CheckBox>
                    </Grid>
                </StackPanel>

                <!-- Radio Button Controls -->
                <!-- The RadioButton control allows you to give your user a list of possible options, with only one of them selected at the same time. You can achieve the same effect, using less space, with the ComboBox control, but a set of radio buttons tend to give the user a better overview of the options they have. -->
                <StackPanel Margin="10" HorizontalAlignment="Center">
                    <Label FontWeight="Bold">Radio Buttons With 2 Groups, Are you ready?</Label>
                    <StackPanel Orientation="Horizontal">
                        <RadioButton Width="60" GroupName="ready">Yes</RadioButton>
                        <RadioButton Width="60" GroupName="ready" IsChecked="True">No</RadioButton>
                        <!--With the GroupName property set on each of the radio buttons, a selection can now be made for each of the two groups. Without this, only one selection for all six radio buttons would be possible.-->
                        <RadioButton Width="60" GroupName="sex">Male</RadioButton>
                        <RadioButton Width="60" GroupName="sex">Female</RadioButton>
                        <RadioButton Width="70" GroupName="sex" IsChecked="True">Not Sure</RadioButton>
                    </StackPanel>
                    <!-- Radio Buttons With custom content -->
                    <!-- The RadioButton inherits from the ContentControl class, which means that it can take custom content and display next to it. If you just specify a piece of text, like I did in the example above, WPF will put it inside a TextBlock control and display it, but this is just a shortcut to make things easier for you. You can use any type of control inside of it, as we'll see in the next example: -->
                    <StackPanel Orientation="Horizontal">
                        <Label FontWeight="Bold" Width="100">Custom Radio :</Label>
                        <RadioButton Margin="0 5 0 0" GroupName="custom">
                            <WrapPanel Width="60">
                                <!--  <Image Source="/HelloWPF;component/Images/accept.png" Width="16" Height="16" Margin="0,0,5,0" /-->
                                <TextBlock Text="Yes" Foreground="Green"/>
                            </WrapPanel>
                        </RadioButton>
                        <RadioButton Margin="0 5 0 0"  GroupName="custom">
                            <WrapPanel Width="60">
                                <!--  <Image Source="/HelloWPF;component/Images/accept.png" Width="16" Height="16" Margin="0,0,5,0" /-->
                                <TextBlock Text="No" Foreground="Red"/>
                            </WrapPanel>
                        </RadioButton>
                        <RadioButton Margin="0 5 0 0"  GroupName="custom" IsChecked="True">
                            <WrapPanel  Width="60">
                                <!--  <Image Source="/HelloWPF;component/Images/accept.png" Width="16" Height="16" Margin="0,0,5,0" /-->
                                <TextBlock Text="Maybe" Foreground="Gray"/>
                            </WrapPanel>
                        </RadioButton>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
        </StackPanel>

        <!-- Row 0 Column 1 : Image Controls With Stretch -->
        <StackPanel Grid.Row="0" Grid.Column="1" Background="LightCyan" Margin="10 10 10 10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Label Grid.Column="0" HorizontalAlignment="Center" FontWeight="Bold">Uniform Stretch Image</Label>
                <Label Grid.Column="1" HorizontalAlignment="Center" FontWeight="Bold">UniformToFill Stretch Image</Label>
                <Label Grid.Column="2" HorizontalAlignment="Center" FontWeight="Bold">Fill Stretch Image</Label>
                <Label Grid.Column="3" HorizontalAlignment="Center" FontWeight="Bold">None Stretch Image</Label>
                <Image Source="/Resources/tiger.png" Stretch="Uniform" Grid.Column="0" Grid.Row="1" Margin="5" />
                <Image Source="/Resources/tiger.png" Stretch="UniformToFill" Grid.Column="1" Grid.Row="1" Margin="5" />
                <Image Source="/Resources/tiger.png" Stretch="Fill" Grid.Column="2" Grid.Row="1" Margin="5" />
                <Image Source="/Resources/tiger.png" Stretch="None" Grid.Column="3" Grid.Row="1" Margin="5" />
            </Grid>
        </StackPanel>

        <!-- Row 1 Column 1 : Image Controls -->
        <!-- The Image control ==> The WPF Image control will allow you to display images inside your applications. It's a very versatile control, with many useful options and methods, as you will learn in this article. But first, let's see the most basic example of including an image inside a Window:-->
        <StackPanel Grid.Row="1" Grid.Column="1" Height="200"  Margin="10 10 10 10"  Orientation="Horizontal" HorizontalAlignment="Center" >
            <!--<Image Width="300" Source="/Resources/tiger_test.JPG" /> NEED TO DEBUG NOT SURE HOW TO GET IMAGE FROM PROJECT, IT NOT LOADING....-->
            <Image Width="300"  Source="https://wpf-tutorial.com/Images/ArticleImages/1/basic-controls/image_control_basic_url.png" />
            <StackPanel HorizontalAlignment="Center" Background="LightCyan">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" >
                    <Button Margin="10 10 10 10" Click="BtnLoadImageFromResource_Click">Load Image From Resource</Button>
                    <Button Margin="10 10 10 10" Click="BtnLoadImageFromFile_Click">Load Image From File</Button>
                </StackPanel>
                <StackPanel>
                    <Image VerticalAlignment="Center" HorizontalAlignment="Center" Margin="10" Stretch="UniformToFill" x:Name="imageTest" Width="300" Height="130" Source="https://wpf-tutorial.com/Images/ArticleImages/1/basic-controls/image_control_basic_url.png" />
                </StackPanel>
            </StackPanel>

            <!-- Row 1 Column 1 : Tab Order -->
            <!-- This dialog consists of a Grid, split in the middle, with StackPanel's on each side, containing labels and textboxes. The default tab order behavior is to start with the first control of the Window and then tab through each of the child controls found within it, before moving to the next control. Since the dialog consists of vertically oriented StackPanels, that would mean that we would start in the First name field and then move to the Street name field and then the City field, before moving to StackPanel number two, containing the fields for Last name and Zip code. When tabbing out of the second StackPanel, the two buttons would finally be reached. However, for this dialog, that's not the behavior I want. Instead I want to tab from First name to Last name (so basically moving horizontally instead of vertically), and on top of that, I don't want to enter the City field when tabbing through the form, because that will be automatically filled based on the Zip code in this imaginary dialog and has therefore been made readonly. To accomplish all of this, I will use two properties: TabIndex and IsTabStop. TabIndex is used to define the order, while the IsTabStop property will force WPF to skip a control when tabbing through the Window. Here's the markup used to create the dialog: -->
            <StackPanel  Margin="20 0 0 0" Background="LightCyan">
                <Grid Margin="10" Background="LightCyan">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="20" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <StackPanel Margin="5 5 5 5">
                        <Label>First name:</Label>
                        <TextBox TabIndex="0" />
                        <Label>Street name:</Label>
                        <TextBox TabIndex="2" />
                        <Label>City:</Label>
                        <TextBox TabIndex="5" IsReadOnly="True" IsTabStop="False" Background="Gainsboro" />
                    </StackPanel>
                    <StackPanel Grid.Column="2" Margin="5 5 5 5">
                        <Label>Last name:</Label>
                        <TextBox TabIndex="1" />
                        <Label>Zip Code:</Label>
                        <TextBox TabIndex="4" />
                    </StackPanel>
                    <Button Margin="5 5 5 5" Grid.Row="1" HorizontalAlignment="Right" Width="80">TapOrder</Button>
                    <Button Margin="5 5 5 5" Grid.Row="1" Grid.Column="2" HorizontalAlignment="Left" Width="80">TapOrder</Button>
                </Grid>
            </StackPanel>

            <!-- Access Keys -->
            <!--Tying together two controls ==> In the examples we have seen so far, we have been able to define the Access Key directly on the control we want to reach. But there's at least one example where this isn't directly possible: When you have an input control, e.g. a TextBox, the text that indicate its purpose doesn't exist within the actual TextBox control. Instead, you would usually use a second control to indicate, with text, the purpose of the TextBox control. This would usually be a Label control. So, in this example, the Label control would then hold the descriptive text, and therefore also the Access Key, but the control you want to give attention to would be the TextBox control. No problem - we can use the Target property of the Label to tie it together with the TextBox (or any other control), like this: Notice how the Access Key is specified for the Label controls and then tied to the relevant TextBox control using the Target property, where we use an ElementName based Binding to do the actual work. Now we can access the two TextBox controls using Alt+F and Alt+L, and the Button with Alt+S. Here's how it looks:-->
            <StackPanel Margin="20 0 0 0" Background="LightCyan">
                <TextBlock Margin="5" HorizontalAlignment="Center" FontWeight="Bold">Access Key</TextBlock>
                <Label Content="_First name:" Target="{Binding ElementName=txtFirstName}" />
                <TextBox Margin="5" Name="txtFirstName" />
                <Label Content="_Last name:" Target="{Binding ElementName=txtLastName}" />
                <TextBox Margin="5" Name="txtLastName" />
                <Button Content="_Save" Margin="20"></Button>
            </StackPanel>
        </StackPanel>
    </Grid>
</Window>

<!-- *** XAML Note *** 
 * Margin ==> <object Margin="left,top,right,bottom"/>  
 * F5 ==>  Start debugging or press F5  
 * Simply press the [Tab] key twice to have Visual Studio generate the correct event handler for you
-->